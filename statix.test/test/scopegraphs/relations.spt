module scopegraph-relations

language StatixTest

test query single item in the same scope succeeds [[
  resolve {s}
    new s, !r[7] in s,
    query r in s |-> [(_, 7)]
  signature
    relations
      r : int
]] analysis succeeds
   run evaluate-test to SUCCEEDS()

test query multiple items in the same scope succeeds [[
  resolve {s}
    new s, !r[7] in s, !r[42] in s,
    query r in s |-> [_, _]
  signature
    relations
      r : int
  rules
    eq : int * int
    eq(x, x).
]] analysis succeeds
   run evaluate-test to SUCCEEDS()

test multiple data for same key gives a single result [[
  resolve {s i j k}
    new s, !r[7, j] in s, !r[7, i] in s,
    query r filter true and { 7 } in s |-> [(_, (7, k))],
    eq(i, k), eq(j, k)
  signature
    relations
      r : int -> int
  rules
    eq : int * int
    eq(x, x).
]] analysis succeeds
   run evaluate-test to SUCCEEDS()

test match path labels with regular expression [[
  resolve {s1 s2}
    new s1 s2, s1 -P-> s2, !r[7] in s2,
    query r filter pathMatch[P*] in s1 |-> [_]
  signature
    name-resolution
      labels P
    relations
      r : int
]] analysis succeeds
   run evaluate-test to SUCCEEDS()

test match exact steps with regular expression [[
  resolve {s1 s2 s3}
    new s1 s2 s3,
    s1 -P-> s2, !r[7] in s2,
    s2 -P-> s3, !r[9] in s3,
    query r filter pathMatch[P P] in s1 |-> [(_, 9)]
  signature
    name-resolution
      labels P
    relations
      r : int
]] analysis succeeds
   run evaluate-test to SUCCEEDS()

test reject path with regular expression [[
  resolve {s1 s2 s3}
    new s1 s2 s3, s1 -P-> s2, s2 -P-> s3, !r[7] in s3,
    query r filter pathMatch[P] in s1 |-> []
  signature
    name-resolution
      labels P
    relations
      r : int
]] analysis succeeds
   run evaluate-test to SUCCEEDS()

test default accepts all paths [[
  resolve {s1 s2 s3}
    new s1 s2 s3, s1 -P-> s2, s2 -P-> s3, !r[7] in s3,
    query r in s1 |-> [_]
  signature
    name-resolution
      labels P
    relations
      r : int
]] analysis succeeds
   run evaluate-test to SUCCEEDS()

test query one reachable and one unreachable item [[
  resolve {s1 s2 s3}
    new s1 s2 s3,
    s1 -P-> s2, !r[7] in s2,
    s2 -P-> s3, !r[1] in s3,
    query r filter pathMatch[P] in s1 |-> [(_, 7)]
  signature
    name-resolution
      labels P
    relations
      r : int
]] analysis succeeds
   run evaluate-test to SUCCEEDS()

test one item shadowing another [[
  resolve {s1 s2 s3}
    new s1 s2 s3,
    s1 -P-> s2, !r[4] in s2,
    s1 -Q-> s3, !r[7] in s3,
    query r min pathLt[Q < P] and true in s1 |-> [(_, 7)]
  signature
    name-resolution
      labels P Q
    relations
      r : int
]] analysis succeeds
   run evaluate-test to SUCCEEDS()

test query complete relation with another incomplete relation [[
  resolve {s1 x}
    new s1, !r1[4, 5] in s1,
    query r1 filter true and { 4 } in s1 |-> [(_, (4, x))],
    !r2[x, 6] in s1
  signature
    relations
      r1 : int -> int
      r2 : int -> int
]] analysis succeeds
   run evaluate-test to SUCCEEDS()

test query via specific edge to instantiate more incomplete edge [[
  resolve {s1 s2 s3}
    new s1 s2,
    s1 -P-> s2, !r[4, new] in s2,
    query r filter true and { 4 } min pathLt[P < Q] and true in s1 |-> [(_, (4, s3))],
    s1 -Q-> s3
  signature
    relations
      r : int -> scope
    name-resolution
      labels P Q
]] analysis succeeds
   run evaluate-test to SUCCEEDS()

test query ignores non-wellformed incomplete relation [[
  resolve {s1 s2 s3 x}
    new s1 s2 s3,
    s1 -P-> s2, !r[x] in s2,
    s2 -P-> s3, !r[4] in s3,
    query r filter pathMatch[P P] in s1 |-> [(_, x)]
  signature
    relations
      r : int
    name-resolution
      labels P
]] analysis succeeds
   run evaluate-test to SUCCEEDS()

test query ignores non-wellformed incomplete edge [[
  resolve {s1 s2 s3}
    new s1 s2,
    s1 -P-> s2, !r[4, new] in s2,
    query r filter pathMatch[P*] and { 4 } in s1 |-> [(_, (4, s3))],
    s1 -Q-> s3
  signature
    relations
      r : int -> scope
    name-resolution
      labels P Q
]] analysis succeeds
   run evaluate-test to SUCCEEDS()

test adding same data multiple times is idempotent [[
  resolve {s1}
    new s1, !r[4] in s1, !r[4] in s1,
    query r in s1 |-> [_]
  signature
    relations
      r : int
]] analysis succeeds
   run evaluate-test to SUCCEEDS()

test same data in different scopes does not shadow by default [[
  resolve {s1 s2 s3}
    new s1 s2 s3,
    s1 -P-> s2, !r[4] in s2,
    s1 -Q-> s3, !r[4] in s3,
    query r in s1 |-> [_, _]
  signature
    relations
      r : int
    name-resolution
      labels P Q
]] analysis succeeds
   run evaluate-test to SUCCEEDS()

test default filter allows all paths and all data [[
  resolve {s1 s2 s3 s4}
    new s1 s2 s3 s4,
    !r[3] in s1,
    s1 -P-> s2, !r[4] in s2,
    s2 -Q-> s3, !r[5] in s3, !r[6] in s3,
    s2 -P-> s4, !r[7] in s4,
    query r in s1 |-> [_, _, _, _, _]
  signature
    relations
      r : int
    name-resolution
      labels P Q
]] analysis succeeds
   run evaluate-test to SUCCEEDS()

test ask predicate relation for existing tuple succeeds [[
  resolve {s} new s,
    !r[1, 1] in s, !r[1, 2] in s, !r[2, 3] in s,
    ?r[1, 2] in s
  signature
    relations
      r : int * int
]] analysis succeeds
   run evaluate-test to SUCCEEDS()

test ask predicate relation does not follow edges [[
  resolve {s1 s2} new s1 s2,
    s1 -P-> s2, !r[23, 2] in s2,
    ?r[23, 2] in s1
  signature
    relations
      r : int * int
    name-resolution
      labels P
]] analysis succeeds
   run evaluate-test to FAILS()

test ask predicate relation with free value fails [[
  resolve {s} new s,
    !r[1, 1] in s, !r[1, 2] in s, !r[2, 3] in s,
    ?r[1, _] in s
  signature
    relations
      r : int * int
]] analysis succeeds
   run evaluate-test to FAILS()

test ask functional relation for existing tuple succeeds [[
  resolve {s} new s,
    !r[1, 1] in s, !r[2, 3] in s,
    ?r[2, 3] in s
  signature
    relations
      r : int -> int
]] analysis succeeds
   run evaluate-test to SUCCEEDS()

test ask functional relation with free input value fails [[
  resolve {s} new s,
    !r[1, 1] in s, !r[2, 3] in s,
    ?r[_, 3] in s
  signature
    relations
      r : int -> int
]] analysis succeeds
   run evaluate-test to FAILS()

test ask functional relation with free output value succeeds [[
  resolve {s} new s,
    !r[1, 1] in s, !r[2, 3] in s,
    ?r[1, _] in s
  signature
    relations
      r : int -> int
]] analysis succeeds
   run evaluate-test to SUCCEEDS()

test ask functional relation for non-existing input fails [[
  resolve {s} new s,
    !r[1, 1] in s, !r[2, 3] in s,
    ?r[3, _] in s
  signature
    relations
      r : int -> int
]] analysis succeeds
   run evaluate-test to FAILS()

test ask functional relation unifies output value [[
  resolve {s i j} new s,
    !r[2, i] in s,
    ?r[2, j] in s,
    eq(i, j)
  signature
    relations
      r : int -> int
  rules
    eq : int * int
    eq(x, x).
]] analysis succeeds
   run evaluate-test to SUCCEEDS()

test ask functional relation inline succeeds [[
  resolve {s}
    new s, !r[2, 12] in s,
    ?r[2] in s == 12
  signature
    relations
      r : int -> int
]] analysis succeeds
   run evaluate-test to SUCCEEDS()

test ask functional relation inline succeeds [[
  resolve {s}
    new s, !r[2, 12, 8] in s,
    ?r[2] in s == (12, 8)
  signature
    relations
      r : int -> int * int
]] analysis succeeds
   run evaluate-test to SUCCEEDS()

test predicate path projections succeed [[
  resolve {s1 s2 s3 p}
    new s1 s2 s3,
    s1 -P-> s2, s2 -P-> s3,
    query () min pathLt[P < $] and true in s1 |-> [p],
    src(p, s1), dst(p, s3), scopes(p, [s1, s2, s3])
  signature
    name-resolution
      labels P
]] analysis succeeds
   run evaluate-test to SUCCEEDS()
 
test functional path projections succeed [[
  resolve {s1 s2 s3 p}
    new s1 s2 s3,
    s1 -P-> s2, s2 -P-> s3,
    query () min pathLt[P < $] and true in s1 |-> [p],
    src(p) == s1, dst(p) == s3, scopes(p) == [s1, s2, s3]
  signature
    name-resolution
      labels P
]] analysis succeeds
   run evaluate-test to SUCCEEDS()
 
test end-of-path label for shortest path [[
  resolve {s1 s2 s3 p}
    new s1 s2 s3, s1 -P-> s2, s2 -P-> s3,
    query () min pathLt[$ < P] and true in s1 |-> [p],
    dst(p) == s1
  signature
    name-resolution
      labels P
  rules
    eq : list(label) * list(label)
    eq(ls, ls).
]] analysis succeeds
   run evaluate-test to SUCCEEDS()
 
test end-of-path label for longest path [[
  resolve {s1 s2 s3 p}
    new s1 s2 s3, s1 -P-> s2, s2 -P-> s3,
    query () min pathLt[P < $] and true in s1 |-> [p],
    dst(p) == s3
  signature
    name-resolution
      labels P
  rules
    eq : list(label) * list(label)
    eq(ls, ls).
]] analysis succeeds
   run evaluate-test to SUCCEEDS()
 
test labels projections succeed [[
  resolve {s1 s2 s3 s4 p1 p2}
    new s1 s2 s3 s4,
    s1 -P-> s2,
    s3 -P-> s4,
    query () min pathLt[P < $] and true in s1 |-> [p1],
    query () min pathLt[P < $] and true in s3 |-> [p2],
    eq(labels(p1), labels(p2))
  signature
    name-resolution
      labels P
  rules
    eq : list(label) * list(label)
    eq(ls, ls).
]] analysis succeeds
   run evaluate-test to SUCCEEDS()
 