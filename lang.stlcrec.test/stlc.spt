module stlc

language STLCrec

test number [[
  20: num
]] analysis succeeds

test plus [[
  (245 + 45): num
]] analysis succeeds  

test free variable [[
  x
]] analysis fails

test function literal [[
  (fun(x: num) { x + 1 }) : (num -> num)  
]] analysis succeeds

test function application [[
  (fun(x: num) { x + 1 } 4) : num 
]] analysis succeeds

test let [[
  (let x = 1 in x + 1) : num
]] analysis succeeds 

test let is not recursive [[
  let x = x in x + 1
]] analysis fails 

test let [[
  let add = fun(x : num) { fun(y : num) { x + y } } in
  let add1 = add 1 in
    add1 2
]] analysis succeeds   

test let [[
(
  let add = fun(x : num) { fun(y : num) { x + y } } in
  let id  = fun(f : num -> num){ fun(x : num) { f x } } in
    id (add 1) 2 
): num
]] analysis succeeds 


test type let [[
  type int = num in 1 : int
]] analysis succeeds 

test type let [[
  type n2n = num -> num
    in fun(y : num) { y } : n2n
]] analysis succeeds 


