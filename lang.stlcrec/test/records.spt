module stlcrec

language STLCrec

test record literal [[
  {x = 1, y = 2, h = {}}
]] analysis succeeds

test record extension [[
  {x = 1, y = 2, h = {}} with {p = 5} 
]] analysis succeeds

test record projection [[
  {x = 1, y = 2, h = {}}.x 
]] analysis succeeds

test record mis projection [[
  {x = 1, y = 2, h = {}}.z 
]] analysis fails

test record projection [[
  type point = {x : num, y : num} in 
    fun(p : point) { p.x + p.y } 
]] analysis succeeds

test record application [[
  type point = {x : num, y : num} in 
    (fun(p : point) { p.x + p.y } {x = 1, y = 2}) : num
]] analysis succeeds

test record subtype [[
  type point = {x : num, y : num} in 
    (fun(p : point) { p.x + p.y } {x = 1, y = 2, z = 3}) : num
]] analysis succeeds

test record not a subtype [[
  type point = {x : num, y : num} in 
    (fun(p : point) { p.x + p.y } {x = 1, z = 3}) : num
]] analysis fails

test nested records [[
  let f = fun(r : {p : {x : num}}){ r.p.x } in
  let q = {p = {x = -7, y = 10}}
   in (f q) : num
]] analysis succeeds

test nested record not a subtype [[
  let f = fun(r : {p : {x : num}}){ r.p.x } in
  let q = {p = {y = 10}}
   in (f q) : num
]] analysis fails

test record extension 1 [[
  type point = {x : num, y : num} in 
  type color = num in
  type colorpoint = point with {c : color} in
    {x = 1, y = 5, c = 6} : colorpoint
]] analysis succeeds

test record extension 2 [[
  type point = {x : num, y : num} in 
  type color = num in
  type colorpoint = point with {c : color} in
    ({x = 1} with {y = 5, c = 6}) : colorpoint
]] analysis succeeds

test record extension 3 [[
  type point = {x : num, y : num} in 
  type color = num in
  type colorpoint = point with {c : color} in
    ({c = 6} with {x = 1} with {y = 5}) : colorpoint
]] analysis succeeds

test record extension 4 [[
  type point = {x : num, y : num} in 
  type color = num in
  type colorpoint = point with {c : color} in
    ({c = 6} with {y = 5}) : colorpoint
]] analysis fails

test record extension [[
  type point = {x : num, y : num} in 
  let  mkpoint = fun(x : num) { {x = x, y = x} } in
  type color = num in
  type colorpoint = point with {c : color} in
  let  addColor = fun(c : num) { fun(p : point) { (p with {c = c}) : colorpoint } } in
    (addColor 6 (mkpoint 4)) : colorpoint
]] analysis succeeds

test record extension subtype [[
  fun(r : {y : num}) { r } ({x = 1} with {y = 3}) 
]] analysis succeeds

test type ascription subtype [[
  {x = 1, y = 2} : {x : num}
]] analysis succeeds
