module STLCrec

imports Common 

context-free start-symbols Start

context-free syntax
  
  Start = Exp
  
  Exp        = <(<Exp>)> {bracket}

  Exp.Var    = <<ID>>
  Exp.Num    = <<INT>>
  Exp.Plus   = <<Exp> + <Exp>> {left}
  Exp.Fun    = <fun(<ID> : <TypeExp>){ <Exp> }> 
  Exp.App    = <<Exp> <Exp>> {left}
  Exp.Rec    = <{<{FldInit ","}*>}>
  Exp.FAccess = <<Exp>.<ID>>
  Exp.FExtend = <<Exp> with {<{FldInit ","}*>}>
  Exp.TypeLet = <type <ID> = <TypeExp> in <Exp>>
  Exp.Let     = <let <ID> = <Exp> in <Exp>>
  
  Exp.TAS     = <<Exp> : <TypeExp>> 
  
  FldInit.FldInit = <<ID> = <Exp>>
  
  TypeExp.NumType  = <num>
  TypeExp.FunType  = [[TypeExp] -> [TypeExp]] {right}
  TypeExp.RecType  = <{<{FldType ","}*>}> 
  TypeExp.ERecType = <<TypeExp> with {<{FldType ","}*>}>
  TypeExp.TypeRef  = <<ID>>
  TypeExp          = <(<TypeExp>)> {bracket}
  
  FldType.FldType = <<ID> : <TypeExp>>
  
context-free priorities

  Exp.TAS > Exp.App 
  > Exp.FExtend > Exp.FAccess > Exp.Plus 
  > {Exp.TypeLet Exp.Let} 

template options

  ID = keyword {reject}
  
  